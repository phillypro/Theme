
{% for block in section.blocks %}
{% case block.type %}
{% when 'Multiselect' %}
{% if product.handle == block.settings.product %}
{{ 'https://cdn.jsdelivr.net/gh/phillypro/Shopify-Multiselect/multiselect-11.min.js' | script_tag }}
{% comment %}
{{ 'https://cdn.jsdelivr.net/gh/phillypro/Shopify-Multiselect/multiselect-1.min.js' | script_tag }}
{{ 'https://cdn.jsdelivr.net/gh/phillypro/Shopify-Multiselect/multiselect-5.min.js' | script_tag }}
{{ 'https://cdn.jsdelivr.net/gh/phillypro/Shopify-Multiselect/multiselect-0.min.js' | script_tag }}
{{ 'https://cdn.jsdelivr.net/gh/phillypro/Shopify-Multiselect/multiselect-3.min.js' | script_tag }}
{% endcomment %}
{{ 'https://cdn.jsdelivr.net/gh/phillypro/Shopify-Multiselect/multiselect-2.min.js' | script_tag }}
{% if product.variants.size >= 1 %}
<div id="Multiselect_{{ product.id }}" class="multiselect_wrap {% if section.settings.animate %} animate {% endif %}">
   {% for option in product.options %}
   {% if forloop.index0 == 0 %}
   <script>
      var multiselectwrap = document.querySelector('#Multiselect_{{ product.id }}');
      var form = multiselectwrap.closest('form');
      var shopifyAjaxAddURL = '/cart/update.js';       
      var shopifyCartURL = '/cart';
      
      // this might need to be changed based on theme
     // var price = document.querySelector('.price-item');
      //price.innerHTML = 'from ' + price.innerHTML;
      
      // in case back button
      window.addEventListener("pageshow", function() {
         form.reset();
      });
      
                                
      // multiselectform();   
      function multiselectform() {                                    
      form.addEventListener('submit', multiselectsubmit);   
      }
      
     setTimeout(function() {
      // add selected to total...and zero it out
     var pricewrapEl = form.querySelector('#product-price-{{ product.id }}');
      console.log(pricewrapEl);                                   
      var priceEl = form.querySelector('.product-price');
      var priceSymbol = priceEl.textContent.charAt(0);
      priceEl.innerHTML = priceSymbol + '0.00'; 
      var totalSelect = document.createElement("SPAN");
      totalSelect.classList.add('total-select');
      totalSelect.innerHTML = 'Selected Total'; 
      pricewrapEl.prepend(totalSelect);
       
      var comparePrice = pricewrapEl.querySelector('.product-compare-price');
       if(comparePrice) {
         comparePrice.innerHTML = '';
       }      
     },4);
      
     
      
        function multiselectsubmit(e) {
         e.preventDefault();
          //s = { updates: Array.from(form.querySelectorAll('[name="id"]:checked')).map(x => ({variant_id:x.value, quantity: x.getAttribute('quantity')})) };
          var itemStr = '';
          var i = 0;
          var matches = Array.from(form.querySelectorAll('[name="id"]:checked'));
          var $len = matches.length;
           matches.forEach(function(element) {
           itemStr += 'updates[' + element.value +']='+ element.getAttribute('quantity');
           if (i !== $len - 1) {
            itemStr +='&'; 
           }
           i++;  
          });
         postAjax(shopifyAjaxAddURL, itemStr, function(data){ 
            
         //   console.log(data); 
         window.location.href = shopifyCartURL;
          });
          
          
        };  
      
       function postAjax(url, data, success) {
       var params = typeof data == 'string' ? data : Object.keys(data).map(
               function(k){ return encodeURIComponent(k) + '=' + encodeURIComponent(data[k]) }
           ).join('&');
      
       var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
       xhr.open('POST', url);
       xhr.onreadystatechange = function() {
           if (xhr.readyState>3 && xhr.status==200) { success(xhr.responseText); }
       };
       xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
       xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
       xhr.send(params);
       return xhr;
       }
      
      
       var siblings = n => [...n.parentElement.children].filter(c=> c!=n && c.classList.contains('option-wrap'))
       var siblings2 = n => [...n.parentElement.children].filter(c=> c!=n && c.classList.contains('multi-swatch-element'))
       
      
   </script>
  {% style %}
       #product-variants-{{ product.id }} { display: none !important; }
       #shopify-section-Multiselect .multi-swatch .option-wrap .multi-swatch-element.active label, #shopify-section-Multiselect .multi-swatch .option-wrap .multi-swatch-element input[type='radio']:checked ~ label {border-color:{{ section.settings.selectedColor }};}
       #shopify-section-Multiselect .multi-swatch .option-wrap .multi-swatch-element .quantity span { background: {{ section.settings.selectedColor }};}
  {% endstyle %}
   {% endif %}
   {% assign found_option = false %}
   {% assign is_color = false %}
   {% assign option_index = 0 %}
   {% assign lastoption = product.options.size | minus: 1 %}
   {% if option %}
   {% assign found_option = true %}
   {% assign option_index = forloop.index0 %}  
   <style>
      label[for="product-select-option-{{ option_index }}"] { display: none; }
      #product-select-option-{{ option_index }} { display: none; }
      #product-select-option-{{ option_index }} + .custom-style-select-box { display: none !important; }
   </style>
   <script>
    
    var selectoroption =  document.querySelectorAll('.selector-wrapper');
     if(selectoroption) {
       selectoroption.forEach(function(element) {
         element.style.display = "none"; 
       });
     }
      window.onload = function(e){ 
       var selectoroption = document.querySelectorAll('.selector-wrapper'); 
     if(selectoroption) {
       selectoroption.forEach(function(element) {
         element.style.display = "none"; 
       });
     }  
      }
   </script>
   {% assign downcased_option = option | downcase %}
   {% if downcased_option contains 'color' or downcased_option contains 'colour' %}
   {% assign is_color = true %}
   {% endif %}
   {% endif %}
   {% if option_index == 0 %}
   <div class="multi-swatch clearfix {% if option_index == lastoption %}last_swatch{% endif %}" data-option-index="{{ option_index }}">
     <div class="option-wrap first">
       <div class="header">{{ option }} {% if option_index == lastoption %}<span>Choose as many as you like</span>{% endif %}</div>
      {% assign values = '' %}
      {% assign value = variant.options[option_index] %}
      {% for variant in product.variants %}
      {% assign value = variant.option1 %}
      {% unless values contains value %}
      {% assign values = values | join: ',' %}
      {% assign values = values | append: ',' | append: value %} 
      {% assign values = values | split: ',' %} 
       
      <div id="{{ product.handle }}-{{ value | remove: ' ' }}" data-value="{{ value | handle }}" class="multi-swatch-element {% if is_color %}color image {% endif %} value-{{ value | handle }} {% if variant.available %}available{% else %} {% if option_index == lastoption %}soldout{% endif %} {% endif %} {% if forloop.first %}{% unless option_index == lastoption %}active{% endunless %}{% endif %} ">
         <!-- if product options only 1 lets give em all the options...if more lets make another wrapper -->
         {% if variant.inventory_management != blank %}
         {% if variant.inventory_policy == 'continue' %}
         {% assign stock = 999 %}
         {% else %}
         {% assign stock = variant.inventory_quantity %}
         {% endif %}
         {% else %}
         {% assign stock = 999 %}
         {% endif %}   
         {% if option_index == lastoption %} 
         <input id="multi-swatch-{{ option_index }}-{{ value | handle }}" data-value="{{ value | handle }}" type="checkbox" name="id" value="{{ variant.id }}" inventory="{{ stock }}" quantity="1" variant-price="{{ variant.price }}"  {% unless variant.available %}disabled{% endunless %}>
        {% if block.settings.quantity %}
         <div class="quantity">
            <span>0</span>
         </div>
         <label for="multi-swatch-{{ option_index }}-{{ value | handle }}"><span class="multiselect-title">{{ variant.title }}</span> <span class="multiselect_price">{{ variant.price | money }}</span></label>
         {% endif %}
 
         
         {% else %}
         <input id="multi-swatch-{{ option_index }}-{{ value | handle }}" data-value="{{ value | handle }}" type="radio" name="id-{{ option_index }}" value="{{ variant.id }}" inventory="{{ stock }}" quantity="1" {% if forloop.first %} checked{% endif %} {% unless variant.available %}{% if option_index == lastoption %}disabled{% endif %}{% endunless %}>
         <label class="{% if is_color  %}color{% endif %}" for="multi-swatch-{{ option_index }}-{{ value | handle }}">
           {% if is_color  %} 
           <span class="image" {% unless block.settings.color-image %}style="background-color:{{ variant.option1 | handle }};"{% endunless %}>
             <span>
              {% if block.settings.color-image %}<img src="{{ value | handle | append: '.jpg' |  file_img_url: 'medium' }}" />{% endif %}
             </span>
           </span>
           {% endif %}
           <span class="multiselect-title">{{ variant.option1 }}</span>
        </label>

         
         {% endif %}
      </div>
       
      {% if variant.available and option_index != lastoption %}
      <script>
         var el = form.querySelector('.multi-swatch[data-option-index="{{ option_index }}"] .value-{{ value | handle }}');
         var input = el.querySelector('input');                                   
         //remove soldout add available 
         el.classList.remove("soldout");
         input.removeAttribute('disabled');
      </script>
      {% endif %}
       
      {% endunless %}
      {% endfor %} 
      {% if block.settings.quantity and option_index == lastoption %}
      <div class="Multiselect-clear">
         <a href="#">Clear</a>
      </div>
      {% endif %} 
      {% if block.settings.quantity %}
      <script> 
         quantitycheckboxes  = form.querySelectorAll('.multi-swatch[data-option-index="0"] input');
         if (quantitycheckboxes) {
         quantitycheckboxes.forEach(function(quantitycheckbox) { 
         
              quantitycheckbox.addEventListener( 'click', function(e) { 
                                    var swatchelement = this.parentElement;
                
                                  // one time animation before active
                if(!swatchelement.classList.contains('active')) {
                 swatchelement.classList.add('popgrow'); 
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.removeEventListener(name, popgrow, false));                    
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.addEventListener(name, popgrow, false)); 
                  function popgrow(e) {
                    // remove class
                    swatchelement.classList.remove('popgrow');
                   // make it one time
                   "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.removeEventListener(name, popgrow, false));  
                  }
                }
                
                     if(this.checked == true) {
                     swatchelement.classList.add('active');
                       if(this.type == "radio") {
                         var sibs = siblings2(swatchelement);
                         sibs.forEach(element => element.classList.remove('active')); 
                       }
                     }else{
                     {% if block.settings.quantity == false %}  
                     swatchelement.classList.remove('active');
                     {% endif %}  
                     }
                if(this.type == "checkbox") {
                {% if block.settings.quantity %}
                     var quantitywrap = this.nextElementSibling;
                     var quantityspan = quantitywrap.getElementsByTagName('span')[0];
                     var currentquantity = Number(quantityspan.innerHTML);
                     var inventory =  Number(this.getAttribute('inventory'));
                 
                     // add quantity     
                  if(currentquantity < inventory) {
                     quantityspan.innerHTML = ++currentquantity;
                    this.setAttribute('quantity', quantityspan.innerHTML);
                    // add to total price
                    var mspriceEl = quantitywrap.nextElementSibling.querySelector('.multiselect_price');
                    var msprice = parseFloat(mspriceEl.textContent.substring(1));
                    
                    var priceSymbol = mspriceEl.textContent.charAt(0);
                    
                    var totalSelectEl = form.querySelector('.product-price');
                    var totalSelect = parseFloat(totalSelectEl.textContent.substring(1));
                    var newTotal = (Number(msprice) + Number(totalSelect)).toFixed(2);
                    totalSelectEl.innerHTML = priceSymbol + newTotal;
         
                  }
               if(currentquantity > 1) {
                 quantitywrap.classList.add('pop'); 
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.removeEventListener(name, pop, false));                    
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.addEventListener(name, pop, false)); 
                  function pop(e) {
                    // remove class
                    quantitywrap.classList.remove('pop');
                   // make it one time
                   "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.removeEventListener(name, pop, false));  
                  }
                }
           
                // add to total
           
                  
               
                if(this.checked === false ) {
                 this.checked = true; 
                 e.preventDefault(); 
                }
                {% endif %}
                }
              });
              
         });  
         }
         // add clear function
         {% if option_index == lastoption %} 
         var clear = form.querySelector('.multi-swatch[data-option-index="0"] .Multiselect-clear');
         clear.addEventListener( 'click', function(e) {
          quantitycheckboxes.forEach(function(quantitycheckbox) { 
             quantitycheckbox.checked = false;
             quantitycheckbox.setAttribute('quantity', 1);
             quantitycheckbox.nextElementSibling.getElementsByTagName('span')[0].innerHTML = 0;
             quantitycheckbox.parentElement.classList.remove('active');
          }); 
          // clear current total
          var totalSelectEl = form.querySelector('.product-price'); 
          var totalSymbol = totalSelectEl.textContent.charAt(0);
          totalSelectEl.innerHTML = totalSymbol + '0.00';  
         });
         {% endif %}   
      </script>
      {% endif %}
   </div>
  </div>
   {% endif %}
   {% if product.options.size > 1 %} 
   {% if option_index == 1 %}
   <div class="multi-swatch clearfix {% if option_index == lastoption %}last_swatch{% endif %}" data-option-index="{{ option_index }}">
      {% assign values = '' %}
      {% assign value = variant.options[option_index] %}
      {% for variant in product.variants %}
      {% assign value = variant.options[0] %}
      {% unless values contains value %}   
      <div id="option-{{ product.handle }}-{{ product.id }}-{{ value | handle }}" class="option-wrap {% if product.selected_or_first_available_variant.option1 == value and option_index == lastoption %}first {% endif %}"  {% unless product.selected_or_first_available_variant.option1 == value %}style="display:none;"{% endunless %}> 
      <div class="header">{{ option }} {% unless option_index == lastoption %} / {{ value | title }} {% endunless %}{% if option_index == lastoption %}<span>Choose as many as you like</span>{% endif %}</div>
      <div class="option-wrap">
         {% assign optionloop = 0 %} 
         <!-- loop out all the options for this div PERIOD! -->
         {% assign values1 = '' %}
         {% for variant1 in product.variants %}
         {% assign value1 = variant1.option2 %}
         {% unless values1 contains value1 %}      
         {% if variant1.option1 == value %}  
         {% if variant1.inventory_management != blank %}
         {% if variant1.inventory_policy == 'continue' %}
         {% assign stock = 999 %}
         {% else %}
         {% assign stock = variant1.inventory_quantity %}
         {% endif %}
         {% else %}
         {% assign stock = 999 %}
         {% endif %}    
         <div id="element-{{ product.handle }}-{{ value | handle }}-{{ value1 | handle }}" data-value="{{ value | handle }}-{{ value1 | handle }}" class="multi-swatch-element {% if is_color %}color image{% endif %} value-{{ value | handle }}-{{ value1 | handle }} {% if variant1.available %}available{% else %}{% if option_index == lastoption %}soldout{% endif %}{% endif %} {% if optionloop == 0 %}{% unless option_index == lastoption %}active{% endunless %}{% endif %}">
            {% if option_index == lastoption %} 
            <input id="multi-swatch-{{ product.handle }}-{{ value | handle }}-{{ value1 | handle }}" data-value="{{ value | handle }}-{{ value1 | handle }}" type="checkbox" name="id" value="{{ variant1.id }}" inventory="{{ stock }}" quantity="1" variant-price="{{ variant1.price }}"  {% unless variant1.available %}disabled{% endunless %}>
           {% if block.settings.quantity %}
            <div class="quantity">
               <span>0</span>
            </div>
           {% endif %}
         <label class="{% if is_color  %}color{% endif %}"  for="multi-swatch-{{ product.handle }}-{{ value | handle }}-{{ value1 | handle }}">
           {% if is_color  %} 
           <span class="image" {% unless block.settings.color-image %}style="background-color:{{ variant1.option2 | handle }};"{% endunless %}>
             <span>
              {% if block.settings.color-image %}<img src="{{ value1 | handle | append: '.jpg'  |  file_img_url: 'medium' }}" />{% endif %}
             </span>
           </span>
           {% endif %}
           <span class="multiselect-title">{{ variant1.option2 }}</span> 
           <span class="multiselect_price">{{ variant1.price | money }}</span>
           </label>

            
            
            {% else %}
            <input id="multi-swatch-{{ product.handle }}-{{ value | handle }}-{{ value1 | handle }}" data-value="{{ value | handle }}-{{ value1 | handle }}" type="radio" name="id-{{ option_index }}-{{ value | handle }}" value="{{ variant1.id }}" inventory="{{ stock }}" quantity="1" {% if optionloop == 0 %} checked{% endif %} >
            <label class="{% if is_color  %}color{% endif %}" for="multi-swatch-{{ product.handle }}-{{ value | handle }}-{{ value1 | handle }}">
           {% if is_color  %} 
           <span class="image" {% unless block.settings.color-image %}style="background-color:{{ variant1.option2 | handle }};"{% endunless %}>
             <span>
               {% if block.settings.color-image %}<img src="{{ value1 | handle | append: '.jpg'  |  file_img_url: 'medium' }}" />{% endif %}
             </span>
           </span>
           {% endif %}
              <span class="multiselect-title">{{ variant1.option2 }}</span>
           </label>

            
            {% endif %}
         </div>
         {% if variant1.available %}
         <script>
            var el = document.querySelector('#element-{{ product.handle }}-{{ value | handle }}-{{ value1 | handle }}');
            var input = el.querySelector('input');                                   
            //remove soldout add available 
            el.classList.remove("soldout");
            input.removeAttribute('disabled');
         </script>
         {% endif %}
         {% assign values1 = values1 | join: ',' %}
         {% assign values1 = values1 | append: ',' | append: value1 %} 
         {% assign values1 = values1 | split: ',' %}
         {% assign optionloop = optionloop | plus: 1 %}
         {% endif %}    
         {% endunless %}
         {% endfor %}
         {% assign values = values | join: ',' %}
         {% assign values = values | append: ',' | append: value %} 
         {% assign values = values | split: ',' %}
         {% if block.settings.quantity and option_index == lastoption %}
         <div class="Multiselect-clear">
            <a href="#">Clear</a>
         </div>
         {% endif %}
      </div>
   </div>
   {% endunless %}
   {% endfor %} 
   <script>
      // make visibility it reliant on first option
           
             var checkboxes = form.querySelectorAll('.multi-swatch[data-option-index="0"] input');
             
         checkboxes.forEach(function(checkbox) {  
      
             checkbox.addEventListener( 'click', function() { 
              if(this.checked) {
               var el = document.querySelector('.multiselect_wrap #option-{{ product.handle }}-{{ product.id }}-' + this.getAttribute('data-value')); 
              // Checkbox is checked..
               el.style.display = "flex";
                                       
               var brothers_n_sisters = siblings(el);
                // if last option lets clear all checkboxes
               {% if option_index == lastoption %}  
               brothers_n_sisters.forEach(element => [element.style.display = "none",element.querySelectorAll('.multi-swatch-element').forEach(element2 => [element2.classList.remove('active'),element2.querySelector('input[type="checkbox"]').checked = false])]); 
               {% else %} 
               brothers_n_sisters.forEach(element => element.style.display = "none");
               {% endif %} 
               }
              });
         });
     
     
         
      
         
         quantitycheckboxes  = form.querySelectorAll('.multi-swatch[data-option-index="1"] input');
         if (quantitycheckboxes) {
         quantitycheckboxes.forEach(function(quantitycheckbox) { 
      
              quantitycheckbox.addEventListener( 'click', function(e) { 
                                  var swatchelement = this.parentElement;
              
                                  // one time animation before active
                if(!swatchelement.classList.contains('active')) {
                 swatchelement.classList.add('popgrow'); 
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.removeEventListener(name, popgrow, false));                    
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.addEventListener(name, popgrow, false)); 
                  function popgrow(e) {
                    // remove class
                    swatchelement.classList.remove('popgrow');
                   // make it one time
                   "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.removeEventListener(name, popgrow, false));  
                  }
                }
                     if(this.checked == true) {
                     swatchelement.classList.add('active');
                       if(this.type == "radio") {
                         var sibs = siblings2(swatchelement);
                         sibs.forEach(element => element.classList.remove('active')); 
                       }
                     }else{
                     {% if block.settings.quantity == false %}  
                     swatchelement.classList.remove('active');
                     {% endif %}  
                     }
                if(this.type == "checkbox") {
                {% if block.settings.quantity %}
                     var quantitywrap = this.nextElementSibling;
                     var quantityspan = quantitywrap.getElementsByTagName('span')[0];
                     var currentquantity = Number(quantityspan.innerHTML);
                     var inventory =  Number(this.getAttribute('inventory'));
                     // add quantity     
                  if(currentquantity < inventory) {
                     quantityspan.innerHTML = ++currentquantity;
                     this.setAttribute('quantity', quantityspan.innerHTML);
                    
                    // add to total price
                    var mspriceEl = quantitywrap.nextElementSibling.querySelector('.multiselect_price');
                    var msprice = parseFloat(mspriceEl.textContent.substring(1));
                    var priceSymbol = mspriceEl.textContent.charAt(0);
                    var totalSelectEl = form.querySelector('.product-price');
                    var totalSelect = parseFloat(totalSelectEl.textContent.substring(1));
                    var newTotal = (Number(msprice) + Number(totalSelect)).toFixed(2);
                    totalSelectEl.innerHTML = priceSymbol + newTotal;
                    
                    
      
                  }
                if(currentquantity > 1) {
                 quantitywrap.classList.add('pop'); 
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.removeEventListener(name, pop, false));                    
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.addEventListener(name, pop, false)); 
                  function pop(e) {
                    // remove class
                    quantitywrap.classList.remove('pop');
                   // make it one time
                   "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.removeEventListener(name, pop, false));  
                  }
                }
           
               
                if(this.checked === false ) {
                 this.checked = true; 
                 e.preventDefault(); 
                }
                {% endif %}
                }
              });
         });  
         }
         // add clear function
        {% if option_index == lastoption %} 
        var clears = form.querySelectorAll('.multi-swatch[data-option-index="1"] .Multiselect-clear');
        clears.forEach(function(clear) {  
        clear.addEventListener( 'click', function(e) {
          quantitycheckboxes.forEach(function(quantitycheckbox) { 
             quantitycheckbox.checked = false;
             quantitycheckbox.setAttribute('quantity', 1);
             quantitycheckbox.nextElementSibling.getElementsByTagName('span')[0].innerHTML = 0;
             quantitycheckbox.parentElement.classList.remove('active');
          }); 
          var totalSelectEl = form.querySelector('.product-price'); 
          var totalSymbol = totalSelectEl.textContent.charAt(0);
          totalSelectEl.innerHTML = totalSymbol + '0.00';  
        });
        });
        {% endif %}   
        
          
   </script>  
</div>
{% endif %}
{% if option_index == 2 %}
<div class="multi-swatch clearfix {% if option_index == lastoption %}last_swatch{% endif %}" data-option-index="{{ option_index }}">
   <!-- loop out the first option and wrap -->
   {% assign values2 = '' %}  
   {% for variant2 in product.variants %}
   {% assign value2 = variant2.option1 %}
   {% unless values2 contains value2 %}
   <!-- this is the first option -->
   {% if variant2.option1 == value2 %} 
   <div id="option-{{ product.handle }}-{{ product.id }}-{{ option_index }}-{{ value2 | handle }}" class="option-wrap"  {% unless product.selected_or_first_available_variant.option1 == value2 %}style="display:none;"{% endunless %}> 
   <!-- loop out the second option and wrap -->
   {% assign values3 = '' %}  
   {% for variant3 in product.variants %}
   {% assign value3 = variant3.option2 %}
   {% unless values3 contains value3 %}     
   <!-- this is the second option -->
   {% if variant3.option2 == value3 %} 
   <div id="option-{{ product.handle }}-{{ product.id }}-{{ option_index }}-{{ value2 | handle }}-{{ value3 | handle }}" class="option-wrap {% if product.selected_or_first_available_variant.option1 == value2 and product.selected_or_first_available_variant.option2 == value3 and option_index == lastoption %}first{% endif %}"  {% unless product.selected_or_first_available_variant.option2 == value3 %}style="display:none;"{% endunless %}> 
   <div class="header">{{ option }}  / {{ value2 | title }} / {{ value3 | title }} <span>Choose as many as you like</span></div>
   <!-- loop out the first option and wrap -->
   {% assign values4 = '' %}  
   {% for variant4 in product.variants %}
   {% assign value4 = variant4.option3 %}
   {% unless values4 contains value4 %}
   {% if variant4.option3 == value4 and variant4.option2 == value3  and variant4.option1 == value2 %}  
   {% if variant4.inventory_management != blank %}
   {% if variant4.inventory_policy == 'continue' %}
   {% assign stock = 999 %}
   {% else %}
   {% assign stock = variant4.inventory_quantity %}
   {% endif %}
   {% else %}
   {% assign stock = 999 %}
   {% endif %}
   <div id="element-{{ product.handle }}-{{ value2 | handle }}-{{ value3 | handle }}-{{ value4 | handle }}" class="multi-swatch-element {% if is_color %}color image {% endif %} value-{{ value | handle }}-{{ value1 | handle }} {% if variant1.available %}available{% else %}soldout{% endif %}">

      <input id="multi-swatch-{{ product.handle }}-{{ value2 | handle }}-{{ value3 | handle }}-{{ value4 | handle }}" data-value="{{ value2 | handle }}-{{ value3 | handle }}-{{ value4 | handle }}" type="checkbox" name="id" value="{{ variant4.id }}" inventory="{{ stock }}" quantity="1" variant-price="{{ variant4.price }}"  {% unless variant4.available %}disabled{% endunless %}>
     {% if block.settings.quantity %}
      <div class="quantity">
         <span>0</span>
      </div>
      {% endif %} 
           <label class="{% if is_color  %}color{% endif %}" for="multi-swatch-{{ product.handle }}-{{ value2 | handle }}-{{ value3 | handle }}-{{ value4 | handle }}">
          {% if is_color  %} 
           <span class="image" {% unless block.settings.color-image %}style="background:{{ variant4.option3 | handle }};{% endunless %}">
             <span>
              {% if block.settings.color-image %}<img src="{{ value4 | handle | append: '.jpg'  |  file_img_url: 'medium' }}" />{% endif %}
             </span>
           </span>
           {% endif %}
             <span class="multiselect-title">{{ variant4.option3 }}</span> 
             <span class="multiselect_price">{{ variant4.price | money }}</span>
           </label>

      
   </div>
   {% if variant4.available %}
   <script>
      var el = document.querySelector('#element-{{ product.handle }}-{{ value2 | handle }}-{{ value3 | handle }}-{{ value4 | handle }}');
       var input = el.querySelector('input');                                   
         //remove soldout add available 
       el.classList.remove("soldout");
        el.classList.add("available");
       input.removeAttribute('disabled');
   </script>
   {% endif %}
   {% assign values4 = values4 | join: ',' %}
   {% assign values4 = values4 | append: ',' | append: value4 %} 
   {% assign values4 = values4 | split: ',' %}
   {% assign optionloop = optionloop | plus: 1 %}
   {% endif %}    
   {% endunless %}
   {% endfor %}
   {% if block.settings.quantity and option_index == lastoption %}
   <div class="Multiselect-clear">
      <a href="#">Clear</a>
   </div>
   {% endif %}
</div>
{% assign values3 = values3 | join: ',' %}
{% assign values3 = values3 | append: ',' | append: value3 %} 
{% assign values3 = values3 | split: ',' %}
{% endif %}
<script>
   // make visibility it reliant on first option
     var checkbox = document.querySelector("#multi-swatch-{{ product.handle }}-{{ value2 | handle }}-{{ value3 | handle }}");
          checkbox.addEventListener( 'click', function() { 
           if(this.checked) {
            var el = document.querySelector('#option-{{ product.handle }}-{{ product.id }}-{{ option_index }}-{{ value2 | handle }}-{{ value3 | handle }}'); 
           // Checkbox is checked..    
   
            el.style.display = "flex";
            var brothers_n_sisters = siblings(el);
             // if last option lets clear all checkboxes
            {% if option_index == lastoption %}  

            brothers_n_sisters.forEach(element => [element.style.display = "none",element.querySelectorAll('input').forEach(element2 => [element2.checked = false, element2.parentElement.classList.remove('active')] )]); 
            {% else %} 
            brothers_n_sisters.forEach(element => [element.style.display = "none"]);
            {% endif %} 
            }
           });
</script>
{% endunless %}     
{% endfor %} 
<!-- END second loop --> 
</div>
{% assign values2 = values2 | join: ',' %}
{% assign values2 = values2 | append: ',' | append: value2 %} 
{% assign values2 = values2 | split: ',' %}
{% endif %} 
{% endunless %}
{% endfor %}
<script>
   var checkboxes = form.querySelectorAll('.multi-swatch[data-option-index="0"] input');
   checkboxes.forEach(function(checkbox) { 
    checkbox.addEventListener( 'click', function() { 
     if(this.checked) {
       var checkbox1 = this;
       // 2nd level deep
      
      var eltop = document.querySelector('#option-{{ product.handle }}-{{ product.id }}-{{ option_index }}-' + checkbox1.getAttribute('data-value')); 
      eltop.style.display = "flex";
      var brothers_n_sisters = siblings(eltop);
    {% if block.settings.quantity %}
      brothers_n_sisters.forEach(element => [element.style.display = "none", element.querySelectorAll('input[type="checkbox"]').forEach(element2 => [element2.checked = false, element2.setAttribute('quantity', 1), element2.parentElement.querySelector('.quantity').getElementsByTagName('span')[0].innerHTML = 0,element2.parentElement.classList.remove('active')] ) ]);
     {% else %}
       brothers_n_sisters.forEach(element => [element.style.display = "none", element.querySelectorAll('input[type="checkbox"]').forEach(element2 => [element2.checked = false, element2.setAttribute('quantity', 1),element2.parentElement.classList.remove('active')] ) ]);      
     {% endif %}
       
      
        // 3rd level deep
        var wrap = document.querySelector('#option-{{ product.handle }}-{{ product.id }}-' + checkbox1.getAttribute('data-value'));                                
        var checkbox2 = wrap.querySelector(":checked");
                                 
          if(checkbox2.checked) {     
              var elmiddle = document.querySelector('#option-{{ product.handle }}-{{ product.id }}-2-' + checkbox2.getAttribute('data-value') ); 
              // Checkbox is checked..
              elmiddle.style.display = "flex";
                                                  
           };
                                                    
                                                    
                                                    
                                                    
       }
     });
    });
       
       
   
         quantitycheckboxes  = form.querySelectorAll('.multi-swatch[data-option-index="2"] input');
         if (quantitycheckboxes) {
         quantitycheckboxes.forEach(function(quantitycheckbox) { 
              
              quantitycheckbox.addEventListener( 'click', function(e) { 
                     var swatchelement = this.parentElement;
           
                                  // one time animation before active
                if(!swatchelement.classList.contains('active')) {
                 swatchelement.classList.add('popgrow'); 
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.removeEventListener(name, popgrow, false));                    
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.addEventListener(name, popgrow, false)); 
                  function popgrow(e) {
                    // remove class
                    swatchelement.classList.remove('popgrow');
                   // make it one time
                   "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => swatchelement.removeEventListener(name, popgrow, false));  
                  }
                }
                // End Handle
                
                
                    if(this.checked == true) {
                     swatchelement.classList.add('active');
                       if(this.type == "radio") {
                         var sibs = siblings2(swatchelement);
                         sibs.forEach(element => element.classList.remove('active')); 
                       }
                     }else{
                     {% if block.settings.quantity == false %}  
                     swatchelement.classList.remove('active');
                     {% endif %}  
                     }
                if(this.type == "checkbox") {
                     {% if block.settings.quantity %}
                     var quantitywrap = this.nextElementSibling;
                     var quantityspan = quantitywrap.getElementsByTagName('span')[0];
                     var currentquantity = Number(quantityspan.innerHTML);
                     var inventory =  Number(this.getAttribute('inventory'));
                     // add quantity     
                  if(currentquantity < inventory) {
                     quantityspan.innerHTML = ++currentquantity;
                     this.setAttribute('quantity', quantityspan.innerHTML);
                    
                    // add to total price
                    var mspriceEl = quantitywrap.nextElementSibling.querySelector('.multiselect_price');
                    var msprice = parseFloat(mspriceEl.textContent.substring(1));
                    var priceSymbol = mspriceEl.textContent.charAt(0);
                    var totalSelectEl = form.querySelector('.product-price');
                    var totalSelect = parseFloat(totalSelectEl.textContent.substring(1));
                    var newTotal = (Number(msprice) + Number(totalSelect)).toFixed(2);
                    totalSelectEl.innerHTML = priceSymbol + newTotal;
                  }
                if(currentquantity > 1) {
                 quantitywrap.classList.add('pop'); 
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.removeEventListener(name, pop, false));                    
                 "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.addEventListener(name, pop, false)); 
                  function pop(e) {
                    // remove class
                    quantitywrap.classList.remove('pop');
                   // make it one time
                   "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name => quantitywrap.removeEventListener(name, pop, false));  
                  }
                }
 
           
               
                if(this.checked === false ) {
                 this.checked = true; 
                 e.preventDefault(); 
                }
                {% endif %}
                }
              });
         });  
         }
        // add clear function
        {% if block.settings.quantity and option_index == lastoption %} 
        var clears = form.querySelectorAll('.multi-swatch[data-option-index="2"] .Multiselect-clear');
        clears.forEach(function(clear) {  
        clear.addEventListener( 'click', function(e) {
          quantitycheckboxes.forEach(function(quantitycheckbox) { 
             quantitycheckbox.checked = false;
             quantitycheckbox.setAttribute('quantity', 1);
             quantitycheckbox.nextElementSibling.getElementsByTagName('span')[0].innerHTML = 0;
             quantitycheckbox.parentElement.classList.remove('active');
          }); 
          var totalSelectEl = form.querySelector('.product-price'); 
          var totalSymbol = totalSelectEl.textContent.charAt(0);
          totalSelectEl.innerHTML = totalSymbol + '0.00';  
        });
        });
          
    {% endif %}   
       
       
       
</script>
</div>
{% endif %}
{% endif %}  
{% endfor %}
</div>
<!-- End #Multiselect_product.id -->
{% endif %}


{% if section.settings.animate %}
<script>
var element{{ product.id }} = document.querySelector('#Multiselect_{{ product.id }}.animate');
var elementHeight{{ product.id }} = element{{ product.id }}.clientHeight;
     
// listen for scroll event and call animate function
setTimeout(function() {                                                     
document.removeEventListener('scroll', animate{{ product.id }});                                     
document.addEventListener('scroll', animate{{ product.id }});
document.dispatchEvent(new CustomEvent('scroll'));  
}, 600);
  
  
// check if element is in view
function inView{{ product.id }}() {

  // get window height
  var windowHeight = window.innerHeight;
  // get number of pixels that the document is scrolled
  var scrollY = window.scrollY || window.pageYOffset;
  
  // get current scroll position (distance from the top of the page to the bottom of the current viewport)
  var scrollPosition = scrollY + windowHeight;
  // get element position (distance from the top of the page to the bottom of the element)
  var elementPosition = element{{ product.id }}.getBoundingClientRect().top + scrollY + (elementHeight{{ product.id }} / 5);
  
  // is scroll position greater than element position? (is element in view?)
  if (scrollPosition > elementPosition) {
    return true;
  }
  
  return false;
}
  
// animate element when it is in view
function animate{{ product.id }}() {
  // is element in view?
  if (inView{{ product.id }}()) {
    
    // get last animated element
     var elementLast{{ product.id }}Array = element{{ product.id }}.querySelectorAll('.first .multi-swatch-element');
     var elementLast{{ product.id }} = elementLast{{ product.id }}Array[elementLast{{ product.id }}Array.length-1];
     // listen for last animation and remove animate/effect classes                                    
      "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name =>  elementLast{{ product.id }}.removeEventListener(name, animateEnd{{ product.id }}, false));                    
      "webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend".split(" ").map(name =>  elementLast{{ product.id }}.addEventListener(name, animateEnd{{ product.id }}, false)); 
      // element is in view, add class to element
      element{{ product.id }}.classList.add('effect');
  }
}   
  
function animateEnd{{ product.id }}() {
   element{{ product.id }}.classList.remove("effect", "animate");
} 
 
</script> 
{% endif %}
{% endif %}
{% endcase %}
{% endfor %}  
{% schema %}
{
"name": "Multiselect",
"settings": [{
"id": "animate",
"type": "checkbox",
"label": "Animate Intro",
"default":true,
"info": "fade in effect for the options"
},
{
"type": "header",
"content": "Color & Style"
},
{
"id": "selectedColor",
"type": "color",
"label": "Selected Color",
"default": "#F1A3B0"
}
],
"blocks": [
{
"type": "Multiselect",
"name": "Multiselect",
"settings" : [
{
"type": "paragraph",
"content": "Use multiselect with this product"
},
{
"id": "product",
"type": "product",
"label": "Product"
},
{
"id": "quantity",
"type": "checkbox",
"label": "Allow Quantity",
"default":true
},
{
"id": "color-image",
"type": "checkbox",
"label": "Use Images for Colors",
"default":true,
"info": "When Checked it will use an image in your [file area](/admin/settings/files) that matches the name of your color option. If your color option is called \"Natural Black\" crop an image of the color using the 1:1 crop ratio setting [Click Here For Crop Tool](https://imageresizer.com/) save the file with the name \"natural-black.jpg\" and then upload it to your [file area](/admin/settings/files), you're simply replacing each space with - and making sure all latters are lowercase"

}
]
}    
]
}
{% endschema %}
{% stylesheet 'scss' %}
@mixin bp($point) {
  
  $bp-small: "(max-width: 350px)";
  $bp-mobile: "(max-width: 600px)";
  $bp-mobileup: "(min-width: 600px)";
  $bp-phablet: "(max-width: 1022px)";
  $bp-phabletup: "(min-width: 1022px)";
  $bp-tablet: "(max-width: 1280px)";
  $bp-tabletup: "(min-width: 1281px)";
  $bp-laptop: "(max-width: 1600px)";
  $bp-desktop: "(min-width: 1600px)";
  @if $point == desktop {
    @media #{$bp-desktop}  { @content; }
  }  
  @else if $point == laptop {
    @media #{$bp-laptop} { @content; }
  }
  @else if $point == tablet {
    @media #{$bp-tablet} { @content; }
  }
  @else if $point == tabletup {
    @media #{$bp-tabletup} { @content; }
  }
  @else if $point == phablet {
    @media #{$bp-phablet} { @content; }
  }
  @else if $point == phabletup {
    @media #{$bp-phabletup} { @content; }
  }
  @else if $point == mobile {
    @media #{$bp-mobile}  { @content; }
  }
  @else if $point == mobileup {
    @media #{$bp-mobileup} { @content; }
  }
  @else if $point == small {
    @media #{$bp-small}  { @content; }
  }
}


//color transition
@mixin transition($attribute, $duration: null) {
  
      @if ($duration) {
       
    -webkit-transition: $attribute $duration ease;
    -moz-transition: $attribute $duration ease;
    transition: $attribute $duration ease;
    } @else {
        
    -webkit-transition: $attribute;
    -moz-transition: $attribute;
    transition: $attribute;
    }

}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}
@mixin animate($name, $duration, $iteration, $direction) {
  -webkit-animation-duration: $duration;
     -moz-animation-duration: $duration;
       -o-animation-duration: $duration;
          animation-duration: $duration;
  -webkit-animation-iteration-count: $iteration;
     -moz-animation-iteration-count: $iteration;
       -o-animation-iteration-count: $iteration;
          animation-iteration-count: $iteration;
  -webkit-animation-name: $name;
     -moz-animation-name: $name;
       -o-animation-name: $name;
          animation-name: $name;
  -webkit-animation-direction: $direction;
     -moz-animation-direction: $direction;
       -o-animation-direction: $direction;
          animation-direction: $direction;
}

@keyframes multiselect-popspin{
        0% {
          opacity:0;
          transform: translateY(100%) rotateY(360deg);
        
        }
        100% {
        transform: translateY(0) rotateY(0deg);
          opacity:1;
       
        }
}

@keyframes multiselect-pop{
        0% {
          transform: rotateZ(0deg) scale(1);
        }
        30% {
        transform: rotateZ(60deg) scale(1.5);
        }
        60% {
        transform: rotateZ(-60deg) scale(1.5);
        }
        100% {
        transform: rotateZ(0deg) scale(1);
        }
}

 @keyframes multiselect-popgrow{
        0% {
          transform: scale(1);
        }
        50% {
        transform: scale(1.15);
        }
        100% {
        transform: scale(1);
        }
}
$multiselect-selected: pink;
$multiselect-hover: rgba(167, 192, 251, 0.28);
$multiselect-quantity-background: #f1a3b0;
$multiselect-quantity-font: #fff;

#shopify-section-Multiselect {
width: 100%;
  & .animate .first .multi-swatch-element {
   opacity:0;
    will-change: transform;
   -webkit-backface-visibility: hidden;
   -moz-backface-visibility: hidden;
   -ms-backface-visibility: hidden;
   backface-visibility: hidden;

   -webkit-perspective: 1000;
   -moz-perspective: 1000;
   -ms-perspective: 1000;
   perspective: 1000;
  }
  & .animate.effect .first .multi-swatch-element {
       -webkit-animation-name: fadeInUp-Multiselect;
         animation-name: fadeInUp-Multiselect;
            -webkit-animation-duration: 500ms;
            animation-duration: 500ms;
            -webkit-animation-fill-mode: forwards;
            animation-fill-mode: forwards;
    @for $i from 1 to 20 {
     &:nth-of-type(#{$i}) { animation-delay: $i * 0.060s; -webkit-animation-delay: $i * 0.060s;}
    }
  }
  & .multi-swatch {
 margin-bottom: 20px;   
  & .option-wrap {
   display:flex;
   flex-wrap: wrap;
   width: 100%; 
    & .header {
    width: 100%;
    flex: 1 1 100%;
    font-size: 1.25em;
    /* text-transform: uppercase; */
    letter-spacing: 0.05em;
    font-weight: 600;
    line-height: 1.2;
    margin-bottom: 12px;  
      & span {
    font-size: 70%;
    font-weight: normal;
    letter-spacing: normal;
      }
    }
    & .multi-swatch-element {
    position: relative;
    padding: 0px 3px;
    margin: 0 0px 15px;
    flex-basis: auto;
    flex-grow: 1;
    min-width: 25%;
    @include transition(opacity,0.3s);  
      &.soldout * {
           opacity: 0.5;
      }
      & label {
      border: #EDEDED 3px solid;
      display: block;  
      margin:0;  
      padding: 15px 0;
      @include transition(border-color,0.3s);  
      @include bp(phablet) {
       padding: 10px 0;
      }
        &:hover {
        border-color:$multiselect-hover;
        }
        & span {
         text-align: center; 
         display:block;
        }
      }
      &.popgrow {
                -webkit-animation: multiselect-popgrow 300ms ease-out;    
               animation: multiselect-popgrow 300ms ease-out;    
      animation-delay:unset !important;
    -webkit-animation-delay: unset !important;
      } 
      &.active {

           & label {
           border-color:$multiselect-selected;
           @include transition(border-color,0.3s);
           }
         & .quantity {
            &.pop {
              -webkit-animation: multiselect-pop 500ms ease-out;    
               animation: multiselect-pop 500ms ease-out;  
            }
            & span {
    animation: multiselect-popspin 300ms ease-out;
    animation-delay: 300ms;
    animation-fill-mode: forwards;  
    -webkit-animation: multiselect-popspin 300ms ease-out;
    -webkit-animation-delay: 300ms;
    -webkit-animation-fill-mode: forwards;  
            }
         } 
      }
      & input {
      &[type='radio'] {
         display:none;
        & ~ label {
             @include transition(border-color,0.3s);  
          &:hover {
          border-color: $multiselect-hover;
          }
        }
        &:checked {
         & ~ label {
            border-color:$multiselect-selected;
            @include transition(border-color,0.3s);
          } 
        }
       }
       &[type='checkbox'] {
        display:none;
       }
      }
      & .quantity {
       position:absolute;
       pointer-events: none;
       top: -10px;
       left: 0px;
       width: 100%;
       line-height: normal;
       text-align: center; 
       z-index: 9;
        & span {
opacity: 0;
    background: $multiselect-quantity-background;
    color:$multiselect-quantity-font;      
padding: 5px 11px;
    font-size: 85%;
    display: inline-block;
    border-radius: 100%;
          @include bp(phablet) {
              padding: 3px 8px;
    font-size: 80%;
          }
        }
      }
      &.image {
         min-width: 20%;
         max-width: 20%;
         @include bp(phablet) {
         min-width: 25%;
         max-width: 25%;
        }
         & input[type='radio'], & input[type="checkbox"] {
           &:checked ~ label {
              border:none;
           }
           & ~ label {
              border:none;
              padding:0;
              & .multiselect-title {
                margin-top: 6px;
                 font-size: 80%;
              }
            }
         }
        & .image {
    display: block;
    box-shadow: none;
    border: 6px solid rgba(255,255,255,0.19);
    overflow: hidden;
    border-radius: 20px;
    @include transition(border-color,0.3s);
          & span {
          width: 100%;
    position: relative;
    border: none;
    height: 0;
    margin-bottom: 0;
    padding-bottom: 100%;
    overflow: hidden;
    display: block;
& img {
    min-width: 100%;
    min-height: 100%;
    object-fit: cover;
}
          }
        }
        &.active {
          & .image {
           border-color:$multiselect-selected;
           box-shadow: 0px 5px 8px rgba(0,0,0,0.3);  
          }
        }
        &.popgrow { 
         -webkit-animation:none; 
         animation:none;
          & .image {
             -webkit-animation: multiselect-popgrow 300ms ease-out;    
               animation: multiselect-popgrow 300ms ease-out;    
              animation-delay:unset !important;
              -webkit-animation-delay: unset !important;
          }
        }
      }
    }
    & .Multiselect-clear {
      display: inline-flex;
      align-items: center;
      padding: 20px 20px;
      padding: 16px 20px;
      margin: 0 6px 15px;
      @include bp(phablet) {
      width: 100%;
     justify-content: center;
    padding: 10px 20px;
    margin: 0 4px 10px;
      }
    }
  }
    &.last_swatch {
     margin-bottom: 10px;   
     @include bp(phablet) {
       margin-bottom: 0px;
     }
    & .multiselect-title {
    font-size: 1.25em;
    letter-spacing: 0.05em;
    font-weight: 600;
    line-height: 1.2;
      }
 
    }
  }
}


@keyframes fadeInUp-Multiselect {
   0% {
      opacity: 0;
      transform: translateY(50px);
   }
   100% {
      opacity: 1;
      transform: translateY(0);
   }
}   

{% endstylesheet %} 
{% javascript %}            
{% endjavascript %}                                                                             
 
